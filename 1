Экзаменационные вопросы по МДК 05.03 Тестирование информационных систем

1. Понятие тестирования, этапы процесса тестирования. Цикл тестирования, этапы прохода цикла тестирования.

Тестирование представляет собой деятельность по проверке программного кода и документации. Она должна заранее планироваться и систематически проводиться специально назначенным сотрудником – тестировщиком. Работа тестировщика начинается до утверждения требований к программному продукту.
Этапы тестирования:
1.	Проверка требований к ПП на полноту.
2.	Определение методов тестирования.
3.	Разработка стратегии тестирования.
4.	Разработка плана тестирования.
5.	Создание наборов тестов для проведения интеграционного и системного тестирований.
Цикл тестирования – совокупность действий, выполняемых тестировщиком с момента передачи базовой версии ПП тестировщику для интеграционного, системного или приемного тестирования до момента успешного завершения тестирования.
Каждый проход цикла тестирования состоит из следующих этапов:
1.	Создание базовой версии ПП.
2.	Проведение тестирования.
3.	Анализ результатов.
4.	Создание отчета о тестировании.
5.	Если в процессе тестирования выявлены ошибки, то выполняется их исправление и переход к первому этапу.
6.	Если в процессе тестирования ошибок не выявлено, то цикл тестирования завершается.

2. Виды тестирования в зависимости от объекта тестирования: функциональное тестирование, тестирование безопасности, тестирование защищенности.

Функциональное тестирование – это тип тестирования, направленный на проверку соответствия работы программного обеспечения его функциональным требованиям и спецификациям.
Цель: Убедиться, что все заявленные функции работают корректно и соответствуют требованиям.
Основные виды:
Тестирование черного ящика: Проверка функционала без знания внутренней структуры кода.
Модульное тестирование: Проверка отдельных модулей или компонентов.
Интеграционное тестирование: Проверка взаимодействия между модулями.
Системное тестирование: Проверка всей системы в целом.
Приемочное тестирование: Проверка системы на соответствие требованиям заказчика.

Тестирование безопасности – это процесс проверки программного обеспечения на наличие уязвимостей и обеспечение защиты данных от различных угроз.
Цель: Обеспечить защиту системы и данных от несанкционированного доступа, атак и других угроз.
Основные виды:
Тестирование аутентификации: Проверка корректности процедур входа в систему.
Тестирование авторизации: Проверка правильности распределения прав доступа.
Тестирование на уязвимости: Поиск и устранение уязвимостей, таких как SQL-инъекции, XSS и др.
Тестирование безопасности данных: Проверка защиты данных при передаче и хранении.
Пенетестация: Имитирование атак на систему для выявления уязвимостей.

Тестирование защищенности – это процесс проверки уровня защиты информационных систем и данных от внутренних и внешних угроз.
Цель: Обеспечить высокий уровень защищенности системы и данных от потенциальных угроз.
Основные виды:
Анализ рисков: Оценка возможных угроз и их последствий.
Тестирование на устойчивость к атакам: Проверка способности системы противостоять различным видам атак.
Тестирование резервного копирования и восстановления: Проверка эффективности механизмов резервного копирования и восстановления данных.
Контроль соответствия стандартам безопасности: Проверка соответствия системы международным и отраслевым стандартам безопасности.
Тестирование управления инцидентами: Проверка готовности системы к реагированию на инциденты безопасности.

3. Виды тестирования в зависимости от объекта тестирования: совместимости, кроссбраузерное тестирование, кроссплатформенное тестирование. Нефункциональное тестирование: тестирование требований, тестирование прототипа.

Тестирование совместимости – это процесс проверки программного обеспечения на его работоспособность в различных условиях и средах.
Цель: Убедиться, что ПО корректно функционирует в различных окружениях.
Основные виды:
Тестирование на совместимость с аппаратным обеспечением: Проверка работы ПО на различных устройствах и конфигурациях оборудования.
Тестирование на совместимость с операционными системами: Проверка работы ПО на различных версиях и типах операционных систем.
Тестирование на совместимость с другими приложениями: Проверка работы ПО при взаимодействии с другими программами.

Кроссбраузерное тестирование – это процесс проверки веб-приложений на корректность отображения и функционирования в различных веб-браузерах.
Цель: Убедиться, что веб-приложение выглядит и работает одинаково хорошо во всех поддерживаемых браузерах.
Основные аспекты:
Отображение интерфейса: Проверка правильности отображения элементов интерфейса.
Функциональность: Проверка корректности работы всех функций и сценариев в разных браузерах.
Производительность: Оценка времени загрузки и отклика веб-приложения в разных браузерах.

Кроссплатформенное тестирование – это процесс проверки программного обеспечения на его работоспособность на различных платформах и устройствах.
Цель: Убедиться, что ПО работает корректно на всех поддерживаемых платформах.
Основные аспекты:
Проверка совместимости с различными операционными системами: Windows, macOS, Linux, iOS, Android и т.д.
Проверка работы на различных устройствах: ПК, смартфоны, планшеты и т.д.
Проверка адаптивности интерфейса: Убедиться, что интерфейс корректно адаптируется под разные размеры экранов и разрешения.

Тестирование требований – это процесс проверки полноты, четкости, однозначности и выполнимости требований к программному обеспечению.

Цель: Убедиться, что требования к ПО корректны, полны и не противоречат друг другу.
Основные аспекты:
Анализ требований: Проверка логической согласованности и полноты требований.
Проверка на выполнимость: Оценка реальности и достижимости заявленных требований.
Валидация требований: Убедиться, что требования соответствуют ожиданиям и потребностям заказчика.

Тестирование прототипа – это процесс проверки ранней версии продукта или его отдельных компонентов для выявления и исправления недостатков на ранних стадиях разработки.
Цель: Оценить основные концепции и функциональность, выявить возможные проблемы и получить раннюю обратную связь.
Основные аспекты:
Оценка пользовательского интерфейса: Проверка удобства использования и навигации.
Проверка основных функций: Убедиться, что ключевые функции реализованы и работают корректно.
Сбор обратной связи: Получение мнений пользователей и заинтересованных сторон для внесения корректировок.

4. Виды тестирования в зависимости от объекта тестирования: тестирование пользовательского интерфейса, тестирование удобства использования, тестирование доступности, интернационализации.

Тестирование пользовательского интерфейса – это процесс проверки визуальных элементов и взаимодействий на экране для обеспечения их корректной работы и соответствия требованиям дизайна.
Цель: Убедиться, что все элементы интерфейса правильно отображаются и работают согласно спецификациям.
Основные аспекты:
Визуальная проверка: Оценка соответствия дизайну (цвета, шрифты, размеры элементов).
Функциональная проверка: Проверка работы интерактивных элементов (кнопки, поля ввода, меню и т.д.).
Проверка навигации: Убедиться, что навигационные элементы (ссылки, кнопки переходов) работают корректно.

Тестирование удобства использования – это процесс оценки продукта с точки зрения удобства и эффективности его использования конечными пользователями.
Цель: Обеспечить, чтобы продукт был интуитивно понятным, удобным и эффективным для пользователей.
Основные аспекты:
Легкость изучения: Оценка времени, необходимого для освоения работы с продуктом.
Эффективность использования: Проверка, насколько быстро и точно пользователи могут выполнять задачи.
Удовлетворенность пользователя: Сбор обратной связи от пользователей о степени удовлетворенности продуктом.
Ошибки и их частота: Определение частоты ошибок, которые совершают пользователи, и их серьезность.

Тестирование доступности – это процесс проверки программного обеспечения на соответствие требованиям доступности для людей с ограниченными возможностями.
Цель: Обеспечить, чтобы продукт был доступен и удобен для использования всеми категориями пользователей, включая людей с ограниченными возможностями.
Основные аспекты:
Поддержка вспомогательных технологий: Проверка совместимости с программами для чтения с экрана, увеличителями и другими вспомогательными технологиями.
Использование клавиатуры: Убедиться, что все функции доступны через клавиатуру.
Цветовая контрастность: Проверка контрастности текста и фона для людей с нарушениями зрения.
Аудио- и видеоконтент: Обеспечение наличия субтитров и текстовых описаний для мультимедийных элементов.

Тестирование интернационализации – это процесс проверки программного обеспечения на способность адаптироваться к различным языкам и региональным особенностям без необходимости изменения кода.
Цель: Убедиться, что продукт может быть легко адаптирован для разных локалей.
Основные аспекты:
Проверка локализации: Убедиться, что интерфейс и сообщения правильно переведены и отображаются на разных языках.
Форматы данных: Проверка корректности отображения форматов дат, времени, чисел и валют для разных регионов.
Символы и шрифты: Убедиться, что все символы и шрифты корректно отображаются для разных языков.
Тестирование ввода: Проверка корректности ввода и обработки данных на различных языках и раскладках клавиатуры.

5. Виды тестирования в зависимости от объекта тестирования: тестирование локализации, установки, производительности (нагрузочное, объемное, стрессовое, тестирование на отказ и восстановление).

Тестирование локализации – это процесс проверки программного обеспечения на его соответствие культурным, языковым и региональным особенностям конкретного рынка.
Цель: Убедиться, что продукт адаптирован для использования в различных локалях и корректно отображает все переводы и региональные настройки.
Основные аспекты:
Проверка перевода: Убедиться, что все строки текста правильно переведены и отображаются без ошибок.
Форматы данных: Проверка корректности форматов дат, времени, чисел и валют для конкретной локали.
Интерфейс: Проверка отображения интерфейса, включая длину текстов, размеры элементов и отсутствие обрезанных строк.
Культурные особенности: Убедиться, что контент и символика соответствуют культурным и региональным стандартам.

Тестирование установки – это процесс проверки процесса установки, обновления и удаления программного обеспечения.
Цель: Обеспечить, что установка, обновление и удаление ПО проходят без ошибок и не вызывают проблем.
Основные аспекты:
Установка: Проверка правильности установки программного обеспечения на целевые платформы.
Обновление: Проверка корректности обновления ранее установленных версий программного обеспечения.
Удаление: Убедиться, что ПО корректно удаляется, не оставляя ненужных файлов и записей в системе.
Восстановление: Проверка возможности восстановления ПО после неполной установки или удаления.

Тестирование производительности – это процесс оценки скорости, стабильности и масштабируемости программного обеспечения под различными нагрузками.

Нагрузочное тестирование
Цель: Оценить производительность системы под ожидаемой нагрузкой.
Основные аспекты:
Проверка времени отклика: Измерение времени отклика системы при нормальной и увеличенной нагрузке.
Производительность: Оценка способности системы справляться с заданными объемами запросов и транзакций.

Объемное тестирование
Цель: Оценить поведение системы при обработке больших объемов данных.
Основные аспекты:
Работа с большими объемами данных: Проверка корректности обработки и хранения больших объемов данных.
Производительность: Оценка времени выполнения операций с большими объемами данных.

Стрессовое тестирование
Цель: Оценить поведение системы в условиях предельной нагрузки и выявить ее пределы.
Основные аспекты:
Пиковая нагрузка: Проверка работы системы при нагрузках, превышающих расчетные.
Стабильность: Оценка устойчивости и времени восстановления системы после критических нагрузок.

Тестирование на отказ и восстановление
Цель: Оценить способность системы восстанавливаться после сбоев и продолжать работу.
Основные аспекты:
Проверка отказоустойчивости: Оценка способности системы продолжать работу в условиях частичных отказов компонентов.
Восстановление: Проверка времени и корректности восстановления системы после сбоев.

6. Виды тестирования в зависимости от знания кода: белого ящика, серого ящика, черного ящика.

Тестирование белого ящика – это метод тестирования, при котором тестировщик имеет доступ к исходному коду и внутренней структуре системы.
Цель: Проверить внутреннюю логику, структуру и код программы на соответствие спецификациям и выявить дефекты.
Основные аспекты:
Покрытие кода: Проверка покрытия кода тестами (покрытие операторов, ветвей, условий и путей).
Анализ потоков данных: Проверка корректности потоков данных внутри программы.
Тестирование циклов: Проверка выполнения циклов и их пределов.
Проверка корректности алгоритмов: Убедиться, что реализованные алгоритмы работают правильно.
Преимущества:
Высокая точность в обнаружении дефектов.
Полное покрытие всех логических путей программы.
Возможность оптимизации кода.
Недостатки:
Требует глубокого понимания внутренней структуры и кода.
Может быть трудоемким и затратным по времени.

Тестирование серого ящика – это метод тестирования, при котором тестировщик имеет ограниченные знания о внутренней структуре системы и доступ к некоторой документации или архитектуре кода.
Цель: Использовать частичное знание о внутренней структуре для более эффективного тестирования.
Основные аспекты:
Тестирование интеграции: Проверка взаимодействия между модулями с использованием информации о их интерфейсах.
Тестирование безопасности: Проверка уязвимостей и потенциальных точек отказа на основе архитектуры системы.
Анализ тестовых сценариев: Создание тестов на основе анализа архитектуры и структуры данных.
Преимущества:
Баланс между глубиной проверки и затратами на тестирование.
Повышенная эффективность в обнаружении дефектов на уровне интеграции.
Использование знаний о системе для создания более точных тестов.
Недостатки:
Ограниченные возможности по сравнению с тестированием белого ящика.
Меньшая детализация проверки внутренней логики.

Тестирование черного ящика – это метод тестирования, при котором тестировщик не имеет доступа к исходному коду и внутренней структуре системы и проверяет систему только с точки зрения внешнего поведения.
Цель: Проверить соответствие функциональных требований и спецификаций без учета внутренней структуры.
Основные аспекты:
Функциональное тестирование: Проверка корректности выполнения всех функций системы.
Тестирование на основе спецификаций: Создание тестов на основе описанных требований и пользовательских сценариев.
Проверка пользовательского интерфейса: Оценка корректности взаимодействия пользователя с системой.
Преимущества:
Не требует знания внутренней структуры системы.
Независимость от языка программирования и архитектуры кода.
Подходит для тестирования с точки зрения конечного пользователя.
Недостатки:
Ограниченные возможности по выявлению дефектов в коде и внутренней логике.
Возможность пропустить дефекты, не связанные с внешним поведением.

7. Виды тестирования в зависимости от степени автоматизации: ручное, автоматизированное тестирование.

Ручное тестирование – это процесс проверки программного обеспечения вручную, без использования автоматизированных инструментов и скриптов.
Цель: Убедиться, что программное обеспечение работает в соответствии с требованиями, путем выполнения тестовых сценариев вручную.
Основные аспекты:
Создание тест-кейсов: Разработка подробных тестовых сценариев на основе требований и спецификаций.
Выполнение тестов: Тестировщик вручную выполняет тестовые сценарии и фиксирует результаты.
Анализ результатов: Сравнение фактических результатов с ожидаемыми и документирование выявленных дефектов.
Ретестирование: Проверка исправлений после внесения изменений в ПО.
Преимущества:
Гибкость в тестировании различных аспектов и пользовательских сценариев.
Легкость в адаптации тестов под изменяющиеся требования.
Возможность проведения тестирования на основе интуиции и опыта тестировщика.
Эффективно для тестирования UI и UX.
Недостатки:
Трудоемкость и затраты времени на выполнение тестов.
Возможность человеческих ошибок.
Неэффективность для выполнения повторяющихся и регрессионных тестов.
Ограниченная масштабируемость.

Автоматизированное тестирование – это процесс проверки программного обеспечения с использованием специальных инструментов и скриптов для автоматического выполнения тестов.
Цель: Повысить эффективность и точность тестирования за счет автоматизации повторяющихся и трудоемких тестов.
Основные аспекты:
Разработка тест-скриптов: Создание автоматизированных тестов с использованием языков программирования и специальных фреймворков.
Настройка среды: Подготовка тестовой среды и конфигурация инструментов для автоматизированного тестирования.
Выполнение тестов: Автоматическое выполнение тест-скриптов и сбор результатов.
Анализ результатов: Автоматический анализ и генерация отчетов о результатах тестирования.
Регрессионное тестирование: Частое использование автоматизированных тестов для проверки регрессий после изменений в коде.
Преимущества:
Высокая скорость выполнения тестов.
Повышенная точность и повторяемость результатов.
Возможность проведения тестирования 24/7 без участия человека.
Эффективность для регрессионного тестирования и тестирования производительности.
Легкость масштабирования и покрытия большого числа сценариев.
Недостатки:
Высокие первоначальные затраты на разработку и настройку тестов.
Требуется техническая экспертиза для создания и поддержания тест-скриптов.
Ограниченная гибкость в адаптации под новые требования без изменения скриптов.
Неэффективность для тестирования UI и UX аспектов, требующих человеческого восприятия.

8. Виды тестирования в зависимости от степени изолированности тестируемых компонентов: модульное, интергационное, системное тестирование.

Модульное тестирование – это процесс проверки отдельных компонентов или модулей программного обеспечения в изоляции от других частей системы.
Цель: Убедиться, что каждый отдельный модуль работает правильно согласно его спецификации.
Основные аспекты:
Изолированность: Тестирование проводится на уровне отдельного модуля, без взаимодействия с другими модулями.
Мокирование: Использование заглушек и мок-объектов для эмуляции поведения зависимых модулей.
Мелкие тесты: Создание мелких, четко определенных тестов для проверки отдельных функций и методов.
Автоматизация: Модульные тесты часто автоматизируются для обеспечения быстрой проверки изменений в коде.
Преимущества:
Раннее выявление дефектов.
Легкость в локализации и исправлении ошибок.
Поддержка рефакторинга кода.
Высокая точность тестирования отдельных компонентов.
Недостатки:
Ограниченная проверка взаимодействия между модулями.
Требует написания большого количества тестов.
Не выявляет интеграционные и системные проблемы.

Интеграционное тестирование – это процесс проверки взаимодействия между модулями или компонентами программного обеспечения.
Цель: Убедиться, что отдельные модули корректно взаимодействуют друг с другом и совместно выполняют требуемые функции.
Основные аспекты:
Тестирование интерфейсов: Проверка правильности взаимодействия через интерфейсы между модулями.
Инкрементальное тестирование: Постепенная интеграция и тестирование модулей по мере их готовности.
Системные интеграционные тесты: Проверка взаимодействия значимых подсистем или сервисов.
Использование моков и заглушек: Эмуляция поведения некоторых зависимостей для тестирования интеграции.
Преимущества:
Выявление проблем взаимодействия между модулями.
Проверка совместимости различных компонентов.
Обнаружение ошибок в интерфейсах и протоколах обмена данными.
Недостатки:
Сложность в определении источника ошибки.
Требует дополнительных ресурсов для настройки тестовой среды.
Не охватывает системные и эксплуатационные аспекты полностью.

Системное тестирование – это процесс проверки всей системы в целом, включая все модули и компоненты, для обеспечения соответствия функциональным и нефункциональным требованиям.
Цель: Убедиться, что вся система работает правильно и удовлетворяет требованиям заказчика.
Основные аспекты:
Функциональное тестирование: Проверка всех функциональных требований системы.
Нефункциональное тестирование: Оценка производительности, безопасности, совместимости и других нефункциональных аспектов.
Энд-ту-энд тестирование: Проверка системы от начала до конца, включая все процессы и потоки данных.
Реальные условия: Тестирование в условиях, максимально приближенных к реальной эксплуатации.
Преимущества:
Комплексная проверка всей системы.
Выявление дефектов, связанных с интеграцией и эксплуатацией.
Проверка соответствия системы требованиям заказчика.
Недостатки:
Высокая стоимость и длительность выполнения.
Требует полного развертывания системы.
Сложность в изоляции и исправлении обнаруженных дефектов.

9. Виды тестирования в зависимости от подготовленности: интуитивное тестирование, исследовательское тестирование, тестирование по документации.

Интуитивное тестирование – это неформальный метод тестирования, который проводится без предварительно разработанных тестовых сценариев и документации. Оно основано на интуиции, опыте и знаниях тестировщика.
Цель: Быстро обнаружить очевидные дефекты и ошибки в системе.
Основные аспекты:
Отсутствие структуры: Тестирование проводится спонтанно, без предварительной подготовки.
Использование опыта: Тестировщик полагается на свой опыт и понимание системы.
Гибкость: Возможность быстро переключаться между различными частями системы и методами тестирования.
Преимущества:
Быстрое выявление критических и очевидных ошибок.
Гибкость и возможность адаптации к изменениям в системе.
Не требует затрат на подготовку тестовой документации.
Недостатки:
Неполное покрытие функциональности.
Зависимость от навыков и опыта тестировщика.
Сложность в повторении тестов и документировании результатов.

Исследовательское тестирование – это метод тестирования, который сочетает в себе процесс тестирования с процессом изучения и обучения системе. Тестировщик активно изучает систему, разрабатывает и выполняет тесты на ходу.
Цель: Обнаружить дефекты и проблемы в системе путем активного изучения и анализа ее поведения.
Основные аспекты:
Активное изучение: Тестировщик исследует систему, чтобы понять ее поведение и выявить потенциальные дефекты.
Адаптация: Создание и выполнение тестов на основе полученной информации.
Документирование: Ведение записей о проведенных тестах и обнаруженных дефектах.
Преимущества:
Глубокое понимание системы и ее поведения.
Высокая вероятность выявления скрытых и сложных дефектов.
Возможность адаптации и изменения подхода в процессе тестирования.
Недостатки:
Требует высококвалифицированных тестировщиков.
Сложность в повторении тестов и стандартной отчетности.
Может быть трудоемким и затратным по времени.

Тестирование по документации – это метод тестирования, при котором тестировщик следует заранее разработанным тестовым сценариям и планам, описанным в документации.
Цель: Обеспечить систематическое и полное покрытие всех функциональных и нефункциональных требований системы.
Основные аспекты:
Тестовые сценарии: Использование детально разработанных тест-кейсов, основанных на требованиях и спецификациях.
План тестирования: Следование заранее разработанному плану тестирования.
Документирование: Тщательное документирование выполнения тестов и результатов.
Преимущества:
Систематичность и полнота тестирования.
Легкость в повторении тестов и верификации результатов.
Обеспечение соответствия требованиям и спецификациям.
Недостатки:
Меньшая гибкость в адаптации к изменениям.
Возможность пропуска незапланированных дефектов.
Затраты на разработку и поддержку тестовой документации.

10. Виды тестирования в зависимости от места и времени проведения тестирования: приемочное тестирование, альфа-тестирование, бета- тестирование.

Приемочное тестирование – это процесс проверки программного обеспечения на соответствие требованиям и критериям приемки заказчика перед его внедрением в эксплуатацию.
Цель: Убедиться, что программное обеспечение соответствует всем требованиям и может быть принято заказчиком.
Основные аспекты:
Тестирование по требованиям: Проверка соответствия функциональным и нефункциональным требованиям.
Участие заказчика: Заказчик или представители пользователей активно участвуют в тестировании.
Реальные сценарии: Тестирование проводится в условиях, максимально приближенных к реальным условиям эксплуатации.
Критерии приемки: Использование заранее определенных критериев для оценки готовности системы.
Преимущества:
Обеспечение соответствия требованиям заказчика.
Подтверждение готовности системы к эксплуатации.
Вовлечение конечных пользователей в процесс тестирования.
Недостатки:
Возможны задержки, если требования не полностью соответствуют ожиданиям.
Зависимость от наличия четких и полных требований.

Альфа-тестирование – это внутренняя проверка программного обеспечения, проводимая на стадии завершения разработки, но перед выпуском его на внешнее тестирование.
Цель: Обнаружить и исправить максимальное количество дефектов перед выпуском продукта на бета-тестирование или в эксплуатацию.
Основные аспекты:
Проведение внутри компании: Тестирование проводится разработчиками и внутренними тестировщиками.
Ограниченный доступ: Участие ограниченного числа пользователей, часто включающих сотрудников компании.
Ранние версии ПО: Проверка ранних версий ПО, возможно с ограниченным функционалом.
Исправление дефектов: Активное выявление и исправление дефектов до выхода на бета-тестирование.
Преимущества:
Раннее выявление и исправление ошибок.
Обеспечение базовой стабильности системы перед внешним тестированием.
Улучшение качества перед выпуском на бета-тестирование.
Недостатки:
Ограниченное количество тестировщиков.
Может не выявить все проблемы, встречающиеся в реальных условиях эксплуатации.

Бета-тестирование – это внешняя проверка программного обеспечения, проводимая на стадии завершения разработки с участием реальных пользователей.
Цель: Получить обратную связь от реальных пользователей и выявить дефекты, которые не были обнаружены на предыдущих стадиях тестирования.
Основные аспекты:
Внешние пользователи: Участие реальных пользователей, которые не связаны с разработкой ПО.
Реальные условия эксплуатации: Тестирование проводится в реальных условиях, приближенных к эксплуатации.
Обратная связь: Сбор отзывов и предложений от пользователей для улучшения качества ПО.
Широкое покрытие: Охват различных сценариев использования и конфигураций систем.
Преимущества:
Получение реальной обратной связи от конечных пользователей.
Выявление дефектов и проблем, не обнаруженных в альфа-тестировании.
Улучшение качества и удовлетворенности пользователей.
Недостатки:
Возможность выявления критических ошибок на поздней стадии.
Требует координации и поддержки пользователей.

11. Виды тестирования в зависимости от глубины тестового покрытия: Smoke, MAT, AT.

Виды тестирования в зависимости от глубины тестового покрытия:
Smoke Testing:
Цель: Проверка базовой работоспособности системы.
Описание: Выполняется для быстрого подтверждения, что основная функциональность системы работает. Проверяются самые критичные пути и компоненты.
Пример: Запуск основного функционала приложения, такого как авторизация и главная страница.

Minimal Acceptance Testing (MAT):
Цель: Проверка минимального набора требований.
Описание: Проверяется, соответствует ли система основным критериям приемлемости, чтобы продолжить более детальное тестирование.
Пример: Проверка, что все ключевые функции и бизнес-процессы работают корректно согласно спецификациям.

Acceptance Testing (AT):
Цель: Подтверждение, что система удовлетворяет требованиям и готова к эксплуатации.
Описание: Проводится конечными пользователями или клиентами для оценки системы в реальных условиях. Это наиболее глубокое и всеобъемлющее тестирование.
Пример: Тестирование полного цикла бизнес-процессов и сценариев использования, имитирующих реальную работу пользователей с системой.

12. Виды тестирования в зависимости от тестовых активностей: тестирование новых функциональностей, регрессионное тестирование, валидация дефектов.

Виды тестирования в зависимости от тестовых активностей:
Тестирование новых функциональностей:
Цель: Проверка новых функций и модулей системы.
Описание: Проводится для обеспечения корректной работы недавно разработанных или изменённых функций. Включает тестирование согласно спецификациям и требованиям.
Пример: После добавления нового модуля отчётности, тестирование его функциональности, пользовательского интерфейса и интеграции с другими частями системы.

Регрессионное тестирование:
Цель: Обнаружение ошибок, введённых в систему после изменений.
Описание: Повторное тестирование ранее протестированных частей системы для подтверждения, что изменения (исправления багов, добавление новых функций) не нарушили существующую функциональность.
Пример: После исправления дефекта в платёжной системе, повторное тестирование всего процесса оплаты для проверки, что не возникли новые ошибки.

Валидация дефектов:
Цель: Подтверждение исправления ранее обнаруженных дефектов.
Описание: Проводится после исправления дефектов для проверки, что проблемы действительно устранены и система работает корректно в этих местах.
Пример: После фиксации ошибки в модуле авторизации, проверка работы всех сценариев входа в систему, чтобы убедиться в отсутствии первоначальной ошибки.

13. Понятие требования, значение требований. Этапы работы над требованиями.

Требование — это документированное представление того, что система должна делать или как она должна работать. Требования определяют функциональные и нефункциональные аспекты системы и служат основой для её разработки и тестирования.
Значение требований
Основа для разработки: Требования предоставляют чёткое описание задач и функций, которые система должна выполнять, что направляет процесс разработки.
Критерии для тестирования: Определение успешного выполнения требований позволяет тестировщикам проверять корректность системы.
Коммуникация с заинтересованными сторонами: Требования служат средством общения между клиентами, разработчиками и тестировщиками, помогая обеспечить понимание и согласие всех сторон.
Управление изменениями: Позволяют управлять изменениями в проекте и их влиянием на систему.

Этапы работы над требованиями
Сбор требований:
Выявление потребностей и ожиданий пользователей и других заинтересованных сторон.
Методы: интервью, опросы, наблюдения, анализ существующей документации.

Анализ требований:
Оценка собранных требований на полноту, согласованность, выполнимость и тестируемость.
Определение приоритетов и устранение противоречий.

Документирование требований:
Формализация требований в виде спецификаций.
Использование стандартов и шаблонов для однозначности и полноты описания.

Проверка и утверждение требований:
Проведение ревью и согласование требований с заинтересованными сторонами.
Утверждение финального набора требований, которые будут использованы для разработки и тестирования.

Управление требованиями:
Отслеживание изменений требований и их влияния на проект.
Поддержание актуальности требований на всех этапах жизненного цикла проекта.

Валидация требований:
Подтверждение, что требования правильно отражают потребности пользователей и могут быть реализованы в системе.

14. Уровни требований: уровень бизнес-требований, уровень пользовательских требований, уровень продуктных требований (функциональные и нефункциональные требования).

Уровень бизнес-требований
Описание: Высокоуровневые цели и задачи организации, которые система должна поддерживать.
Цель: Определение стратегических целей и выгод для бизнеса от внедрения системы.
Пример: Увеличение доли рынка на 10%, улучшение клиентского обслуживания, сокращение времени обработки заказов.

Уровень пользовательских требований
Описание: Подробное описание того, что пользователи ожидают от системы, как они будут взаимодействовать с ней.
Цель: Удовлетворение потребностей и ожиданий конечных пользователей системы.
Пример: Возможность пользователю создавать и управлять профилем, доступ к истории заказов, удобный интерфейс для поиска продуктов.

Уровень продуктных требований
Описание: Конкретные характеристики и функции, которые должна иметь система для выполнения бизнес- и пользовательских требований.
Цель: Детальное определение того, как система должна работать.
Функциональные требования
Описание: Описывают конкретные функции и действия, которые должна выполнять система.
Пример: Система должна позволять пользователям регистрироваться и входить в систему, обрабатывать платежи, генерировать отчёты.
Нефункциональные требования
Описание: Описывают характеристики системы, такие как производительность, надежность, безопасность, удобство использования.
Пример: Система должна поддерживать до 10,000 одновременных пользователей, время отклика должно быть менее 2 секунд, данные пользователей должны быть зашифрованы.

15. Вариант использования (Use Case): понятие, назначение, элементы, сценарии.

Понятие: Вариант использования — это описание взаимодействия между пользователем (или другой системой) и системой для выполнения конкретной задачи. Это один из методов моделирования требований к системе, который помогает определить, как система будет использоваться.
Назначение:
Определение функциональных требований к системе.
Обеспечение понимания всех возможных сценариев использования системы.
Служит основой для разработки тестовых сценариев и системной документации.
Улучшение коммуникации между аналитиками, разработчиками и пользователями.

Элементы варианта использования
Акторы:
Описание: Внешние сущности, которые взаимодействуют с системой. Актором может быть человек, другая система или внешний процесс.
Пример: Пользователь, администратор, внешняя платёжная система.

Цель:
Описание: Конкретный результат, который должен быть достигнут в результате выполнения варианта использования.
Пример: Пользователь успешно завершил процесс покупки.

Предусловия:
Описание: Условия, которые должны быть выполнены перед началом сценария.
Пример: Пользователь зарегистрирован и вошел в систему.

Сценарий:
Основной сценарий:
Описание: Последовательность шагов, ведущая к достижению цели при нормальных условиях.
Пример: Пользователь добавляет товар в корзину, переходит к оформлению заказа, вводит платёжные данные, подтверждает покупку.
Альтернативные сценарии:
Описание: Дополнительные или альтернативные пути выполнения сценария.
Пример: Пользователь изменяет количество товаров в корзине, выбирает другой способ оплаты.

Исключительные ситуации:
Описание: Описание шагов в случае возникновения ошибок или исключений.
Пример: Платёж не прошел из-за недостатка средств, пользователю показывается сообщение об ошибке и предлагается ввести другие платёжные данные.

Постусловия:
Описание: Условия, которые должны быть выполнены после завершения сценария.
Пример: Заказ успешно создан и отправлен на обработку.

Сценарии
Основной сценарий:
Пошаговая инструкция по достижению цели варианта использования при нормальном ходе событий.

Альтернативные сценарии:
Описание возможных отклонений от основного сценария, которые приводят к достижению той же цели другим путем.

Исключительные сценарии:
Описание шагов в случае возникновения ошибок или исключений, которые препятствуют достижению основной цели.

16. Требования к качеству функционирования сложных программных комплексов, требования к характеристикам качества сложных программных комплексов.

Требования к качеству функционирования сложных программных комплексов
Качество функционирования сложных программных комплексов определяется набором характеристик, которые обеспечивают их надежность, производительность, безопасность и удобство использования. Основные требования к качеству включают:

Надежность:
Цель: Обеспечение безотказной работы системы в течение заданного времени.
Ключевые показатели:
Доступность: Система должна быть доступна для использования в течение максимального времени.
Устойчивость к отказам: Способность системы продолжать работу в случае отказа одного или нескольких компонентов.
Восстанавливаемость: Способность системы быстро восстановиться после сбоя.

Производительность:
Цель: Обеспечение своевременной обработки данных и отклика системы.
Ключевые показатели:
Время отклика: Время, необходимое для выполнения определённого действия.
Пропускная способность: Количество операций, выполняемых системой за единицу времени.
Масштабируемость: Способность системы увеличивать производительность при увеличении нагрузки.

Безопасность:
Цель: Защита данных и функций системы от несанкционированного доступа и атак.
Ключевые показатели:
Конфиденциальность: Защита данных от несанкционированного доступа.
Целостность: Обеспечение точности и полноты данных.
Доступность: Обеспечение доступности данных и функций для авторизованных пользователей.

Удобство использования:
Цель: Обеспечение легкости и удобства взаимодействия пользователей с системой.
Ключевые показатели:
Узнаваемость: Легкость освоения системы новыми пользователями.
Эффективность: Способность пользователей выполнять задачи быстро и без усилий.
Удовлетворенность: Уровень удовлетворенности пользователей при взаимодействии с системой.

Поддерживаемость:
Цель: Обеспечение возможности легко изменять и обновлять систему.
Ключевые показатели:
Модульность: Структурная организация системы, позволяющая легко вносить изменения.
Понятность: Легкость понимания и использования кода и документации.
Тестируемость: Способность системы поддерживать процесс тестирования.

Требования к характеристикам качества сложных программных комплексов
Функциональность:
Система должна выполнять все заявленные функции корректно и полно.
Соответствие требованиям и спецификациям.
Взаимодействие с другими системами и компонентами.

Эффективность:
Оптимальное использование ресурсов (память, процессорное время).
Минимизация затрат на выполнение операций.

Совместимость:
Способность системы работать в различных средах (аппаратных, программных, сетевых).
Поддержка стандартов и протоколов.

Переносимость:
Способность системы работать на разных платформах и в различных средах.
Легкость адаптации к новым условиям.

Адаптируемость:
Способность системы адаптироваться к изменениям в требованиях и окружающей среде.
Гибкость и расширяемость функциональности.

17. Требования к эффективности использования ресурсов ЭВМ программным комплексом в реальном времени. Проверка корректности функциональных требований к сложным комплексам программ.

Требования к эффективности использования ресурсов ЭВМ программным комплексом в реальном времени
Для программных комплексов, работающих в реальном времени, важно эффективно использовать ресурсы ЭВМ, чтобы обеспечить своевременное выполнение задач. Основные требования включают:

Производительность:
Время отклика: Система должна быстро реагировать на запросы и события, обеспечивая минимальные задержки.
Пропускная способность: Система должна обрабатывать максимальное количество операций в единицу времени.

Оптимизация использования ресурсов:
Процессорное время: Система должна эффективно использовать процессорное время, избегая перегрузок.
Память: Оптимизация использования оперативной памяти для предотвращения утечек памяти и обеспечении её достаточного объёма для всех процессов.
Дисковое пространство: Эффективное управление дисковым пространством для хранения данных и журналов.

Реализация приоритетов:
Обработка приоритетных задач: Система должна уметь обрабатывать задачи с разными приоритетами, обеспечивая своевременное выполнение критичных задач.

Непрерывность работы:
Устойчивость к отказам: Система должна продолжать функционировать при отказах отдельных компонентов.
Восстанавливаемость: Способность быстро восстанавливаться после сбоев.

Энергопотребление:
Система должна быть энергоэффективной, особенно в случае встроенных или мобильных приложений, чтобы продлить срок службы батарей и снизить эксплуатационные расходы.

Проверка корректности функциональных требований к сложным комплексам программ
Для проверки корректности функциональных требований необходимо использовать следующие методы:

Анализ требований:
Цель: Обеспечение полноты, однозначности и выполнимости требований.
Методы: Ревью требований, анализ требований на согласованность и отсутствие противоречий.

Моделирование и прототипирование:
Цель: Проверка жизнеспособности и корректности требований на ранних стадиях разработки.
Методы: Создание моделей системы и прототипов, проведение сценариев использования.

Верификация требований:
Цель: Подтверждение того, что требования правильно отражают потребности пользователей и спецификации.
Методы: Ревью, инспекции и согласование требований с заинтересованными сторонами.

Тестирование:
Цель: Убедиться, что реализованная система соответствует функциональным требованиям.
Методы:
Юнит-тестирование: Проверка отдельных компонентов системы.
Интеграционное тестирование: Проверка взаимодействия между компонентами.
Системное тестирование: Полная проверка всей системы на соответствие функциональным требованиям.
Приемочное тестирование: Проверка соответствия системы ожиданиям и требованиям конечных пользователей.

Трассируемость требований:
Цель: Обеспечение возможности прослеживания реализации каждого требования на всех этапах разработки.
Методы: Создание матриц трассируемости, которые связывают требования с соответствующими элементами дизайна, кода и тестов.

18. Понятие качества ПО. Стандарт определения качества ПО. Основные аспекты качества ПО по ISO 9126.



19. Характеристики и атрибуты качества ПО по ISO 9126 и их описание.



20. Метрики оценки качества ПО и их характеристики.



21. Классификация методов контроля качества.



22. Понятие исключения, примеры исключений.



23. Особенности функционального тестирования программного обеспечения (тестирования «черного ящика»). Ошибки, выявляемые при функциональном тестировании



24. Задачи, решаемые при функциональном тестировании.



25. Методы тестирования по принципу «черного ящика».



26. Методы тестирования по принципу «белого ящика».



27. Понятие системного тестирования. Цели и задачи системного тестирования.



28. Типы системного тестирования. Этапы системного тестирования.



29. Достоинства и недостатки системного тестирования.



30. Понятие нагрузочного тестирования, приложения, виртуального пользователя, итерации, нагрузки, производительности, масштабируемости приложения, профиля нагрузки, нагрузочной точки, теста производительности.



31. Цели нагрузочного тестирования.



32. Виды нагрузочного теста.



33. Понятие стресс-тестирования. Цели стресс-тестирования.



34. Преимущества и недостатки стресс-тестирования.



35. Виды стресс-тестов. Виды результатов стресс-тестов. Этапы проведения тест-тестирования.



36. Понятие интеграционного тестирования. Методы интеграционного тестирования.



37. Структура итогового отчета о результатах тестирования.



38. Содержание разделов «Общая информация», «Тестовое окружение» итогового отчета о результатах тестирования.



39. Содержание раздела «Детализированный анализ качества» отчета о результатах тестирования. отчета о результатах тестирования.


